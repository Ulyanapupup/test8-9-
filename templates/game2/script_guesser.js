const messagesDiv = document.getElementById("messages");
const chatInput = document.getElementById("chat-input");
const numberGrid = document.getElementById("number-grid");
const pageSpan = document.getElementById("page-number");

let currentPage = 0;
const allNumbers = Array.from({ length: 2001 }, (_, i) => i - 1000);
let dimmedNumbers = new Set();

function renderPage() {
  numberGrid.innerHTML = "";
  const half = allNumbers.length / 2;
  const start = currentPage * half;
  const end = start + half;
  const pageNumbers = allNumbers.slice(start, end);

  for (const num of pageNumbers) {
	const el = document.createElement("div");
	el.className = "number";
	if (dimmedNumbers.has(num)) {
	  el.classList.add("dimmed");
	}
	el.textContent = num;
	numberGrid.appendChild(el);
  }

  pageSpan.textContent = currentPage + 1;
}

function nextPage() {
  if (currentPage < 1) {
	currentPage++;
	renderPage();
  }
}

function prevPage() {
  if (currentPage > 0) {
	currentPage--;
	renderPage();
  }
}

renderPage();

// --- –ß–ê–¢ –ß–ï–†–ï–ó SOCKET.IO ---
const socket = io();
const sessionId = "{{ session['session_id'] }}";
const room = "{{ room }}";

// –ü–æ—Å–ª–µ socket = io();
socket.emit("join_game_room", {
  room: room,
  session_id: sessionId
});

function sendMessage() {
    const msg = chatInput.value.trim();
    if (!msg) return;

    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å - –æ–Ω–æ –ø—Ä–∏–¥–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
    // addMessage("–í—ã", msg); // –£–ë–ò–†–ê–ï–ú –≠–¢–£ –°–¢–†–û–ö–£

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit("chat_message", {
        room: room,
        session_id: sessionId,
        message: msg
    });

    chatInput.value = "";
}

// –î–æ–±–∞–≤–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ question_response
socket.on('question_response', function(data) {
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:', data); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
    addMessage("–°–∏—Å—Ç–µ–º–∞", `–ù–∞ –≤–æ–ø—Ä–æ—Å "${data.question}" –æ—Ç–≤–µ—Ç: ${data.response}`);
    
    // –ó–∞—Ç–µ–º–Ω—è–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞
    if (data.dim_numbers && data.dim_numbers.length) {
        console.log('–ß–∏—Å–ª–∞ –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è:', data.dim_numbers); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        data.dim_numbers.forEach(n => dimmedNumbers.add(n));
        renderPage();
    }
});

function addMessage(sender, text) {
  const div = document.createElement("div");
  div.className = "message";
  div.textContent = `${sender}: ${text}`;
  messagesDiv.appendChild(div);
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
socket.on("chat_message", function (data) {
  if (data.sender !== "–í—ã") {
	addMessage(data.sender, data.message);
  }
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
chatInput.addEventListener("keydown", function (e) {
  if (e.key === "Enter") sendMessage();
});



// –î–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
socket.on('question_response', function(data) {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
    addMessage("–°–∏—Å—Ç–µ–º–∞", `–ù–∞ –≤–æ–ø—Ä–æ—Å "${data.question}" –æ—Ç–≤–µ—Ç: ${data.response}`);
    
    // –ó–∞—Ç–µ–º–Ω—è–µ–º –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∏—Å–ª–∞
    if (data.dim_numbers && data.dim_numbers.length) {
        data.dim_numbers.forEach(n => dimmedNumbers.add(n));
        renderPage();
    }
});

socket.on('game_won', function(data) {
    if (data.winner === sessionId) {
        showModal(
            "üéâ –ü–æ–±–µ–¥–∞! üéâ",
            `–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ ${data.secret}!`,
            "–ú–æ–ª–æ–¥–µ—Ü! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä —á–∏—Å–µ–ª!",
            "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
        );
    } else {
        showModal(
            "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞",
            `–°–æ–ø–µ—Ä–Ω–∏–∫ —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${data.secret}.`,
            "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!",
            "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
        );
    }
});

function showModal(title, message, subtitle, buttonText) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content">
            <h2 class="modal-title">${title}</h2>
            <p>${message}</p>
            <p><small>${subtitle}</small></p>
            <button class="modal-button" onclick="location.reload()">${buttonText}</button>
        </div>
    `;
    document.body.appendChild(modal);
}

function checkForQuestion(message) {
    const questionPatterns = [
        /—á–∏—Å–ª–æ (–±–æ–ª—å—à–µ|–º–µ–Ω—å—à–µ) -?\d+\??/i,
        /—á–∏—Å–ª–æ (–ø—Ä–æ—Å—Ç–æ–µ|—á–µ—Ç–Ω–æ–µ|–Ω–µ—á–µ—Ç–Ω–æ–µ|–¥–≤—É–∑–Ω–∞—á–Ω–æ–µ|–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ|—Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ|–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ|–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ)\??/i,
        /—á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è (–∫–≤–∞–¥—Ä–∞—Ç–æ–º|–∫—É–±–æ–º)\??/i,
        /—ç—Ç–æ —á–∏—Å–ª–æ -?\d+\??/i
    ];
    
    return questionPatterns.some(pattern => pattern.test(message));
}





// –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏–µ–º

function renderPage() {
    console.log('–†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞:', Array.from(dimmedNumbers)); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    numberGrid.innerHTML = "";
    const half = allNumbers.length / 2;
    const start = currentPage * half;
    const end = start + half;
    const pageNumbers = allNumbers.slice(start, end);

    for (const num of pageNumbers) {
        const el = document.createElement("div");
        el.className = "number";
        if (dimmedNumbers.has(num)) {
            el.classList.add("dimmed");
            console.log('–ó–∞—Ç–µ–º–Ω—è–µ–º —á–∏—Å–ª–æ:', num); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
        el.textContent = num;
        numberGrid.appendChild(el);
    }

    pageSpan.textContent = currentPage + 1;
}